<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WangDao&#39;s Notes</title>
  <subtitle>Quick notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://emou.me/"/>
  <updated>2016-02-27T02:56:33.113Z</updated>
  <id>http://emou.me/</id>
  
  <author>
    <name>WangDao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用CORS进行跨域请求</title>
    <link href="http://emou.me/2016/02/11/using-cors/"/>
    <id>http://emou.me/2016/02/11/using-cors/</id>
    <published>2016-02-11T08:05:55.000Z</published>
    <updated>2016-02-27T02:56:33.113Z</updated>
    
    <content type="html">&lt;h2 id=&quot;u5F15_u8A00&quot;&gt;&lt;a href=&quot;#u5F15_u8A00&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;　　API的出现增强了富web应用开发的体验。曾经想通过跨域请求api非常困难可以使用json-p这样的技术（有安全限制）或者自己搭建搭服务器。&lt;br&gt;　　&lt;br&gt;　　跨域资源共享（CORS）是一种W3C的规范，允许浏览器进行跨域通信。通过设置XMLHttpRequest对象，CORS允许开发者像发起同域请求那样发起跨域请求。&lt;/p&gt;
&lt;p&gt;　　想象下，网站bob.com想要访问alice.com网站上的一些数据。这种请求是被同源策略所禁止的。然而，使用CORS，alice.com 增加些特殊响应头可以允许来自bob.com的请求。&lt;/p&gt;
&lt;p&gt;　　从上面例子看出，使用CORS需要服务器和客户端之间相互了解。幸运的是，如果你是一位客户端开发者，你可以忽略里面的很多细节。本文将介绍客户端如何进行跨域请求，以及如何配置服务器以支持&lt;br&gt;CORS。&lt;/p&gt;
&lt;h2 id=&quot;u4F7F_u7528CORS_u8BF7_u6C42&quot;&gt;&lt;a href=&quot;#u4F7F_u7528CORS_u8BF7_u6C42&quot; class=&quot;headerlink&quot; title=&quot;使用CORS请求&quot;&gt;&lt;/a&gt;使用CORS请求&lt;/h2&gt;&lt;p&gt;　　本节将介绍如何用Javascript进行跨域请求。&lt;/p&gt;
&lt;h3 id=&quot;u521B_u5EFAXMLHttpRequest_u5BF9_u8C61&quot;&gt;&lt;a href=&quot;#u521B_u5EFAXMLHttpRequest_u5BF9_u8C61&quot; class=&quot;headerlink&quot; title=&quot;创建XMLHttpRequest对象&quot;&gt;&lt;/a&gt;创建XMLHttpRequest对象&lt;/h3&gt;&lt;p&gt;　　浏览器支持情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chrome 3+&lt;/li&gt;
&lt;li&gt;Firefox 3.5+&lt;/li&gt;
&lt;li&gt;Opera 12+&lt;/li&gt;
&lt;li&gt;Safari 4+&lt;/li&gt;
&lt;li&gt;Internet Explorer 8+&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（详细列表请访问&lt;a href=&quot;http://caniuse.com/#search=cors&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://caniuse.com/#search=cors&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;　　Chrome浏览器，火狐，Opera和Safari都使用XMLHttpRequest对象。Internet Explorer使用&lt;br&gt;XDomainRequest对象，有和XMLHttpRequest对象差不多的功能，但是增加了额外的安全防范措施。&lt;/p&gt;
&lt;p&gt;　　开始之前，你需要创建相应的请求对象。Nicholas Zakas 写了个&lt;a href=&quot;https://www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;辅助方法&lt;/a&gt;来兼容不同浏览器：&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
function createCORSRequest(method, url) {
  var xhr = new XMLHttpRequest();
  if (&quot;withCredentials&quot; in xhr) {

    // Check if the XMLHttpRequest object has a &quot;withCredentials&quot; property.
    // &quot;withCredentials&quot; only exists on XMLHTTPRequest2 objects.
    xhr.open(method, url, true);

  } else if (typeof XDomainRequest != &quot;undefined&quot;) {

    // Otherwise, check if XDomainRequest.
    // XDomainRequest only exists in IE, and is IE&#39;s way of making CORS requests.
    xhr = new XDomainRequest();
    xhr.open(method, url);

  } else {

    // Otherwise, CORS is not supported by the browser.
    xhr = null;

  }
  return xhr;
}

var xhr = createCORSRequest(&#39;GET&#39;, url);
if (!xhr) {
  throw new Error(&#39;CORS not supported&#39;);
}
&lt;/code&gt;&lt;/pre&gt;


&lt;h3 id=&quot;Event_handlers&quot;&gt;&lt;a href=&quot;#Event_handlers&quot; class=&quot;headerlink&quot; title=&quot;Event handlers&quot;&gt;&lt;/a&gt;Event handlers&lt;/h3&gt;&lt;p&gt;　　原始的XMLHttpRequest对象只有一个event handler:onreadystatechange,它处理所有响应。&lt;br&gt;XMLHttpRequest2包含许多新的event handler，onreadystatechange依然可以使用。下面是&lt;br&gt;完整列表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Event Handler&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;onloadstart*&lt;/td&gt;
&lt;td&gt;当请求发生时触发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;onprogress&lt;/td&gt;
&lt;td&gt;读取及发送数据时触发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;onabort*&lt;/td&gt;
&lt;td&gt;当请求被中止时触发，如使用abort()方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;onerror&lt;/td&gt;
&lt;td&gt;当请求失败时触发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;onload&lt;/td&gt;
&lt;td&gt;当请求成功时触发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ontimeout&lt;/td&gt;
&lt;td&gt;当调用者设定的超时时间已过而仍未成功时触发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;onloadend*&lt;/td&gt;
&lt;td&gt;请求结束时触发（无论成功与否）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;IE的XDomainRequest不支持带 * 的项目，数据来自&lt;a href=&quot;http://www.w3.org/TR/XMLHttpRequest2/#events&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3.org/TR/XMLHttpRequest2/#events&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　大多数情况下，我们只需要处理onload和OnError事件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
xhr.onload = function() {
 var responseText = xhr.responseText;
 console.log(responseText);
 // process the response.
};

xhr.onerror = function() {
  console.log(&#39;There was an error!&#39;);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　　请求发生错误时，浏览器不能提供有效的错误信息。例如，FireFox在失败时将responseText置空并返回一个0值作为状态码，这当中并不包含任何错误的具体情况。尽管浏览器把错误信息输出到控制台，但是这些信息无法用JavaScript获得到。当触发onerror事件时，也仅仅知道发生错误了而已。&lt;/p&gt;
&lt;h3 id=&quot;withCredentials&quot;&gt;&lt;a href=&quot;#withCredentials&quot; class=&quot;headerlink&quot; title=&quot;withCredentials&quot;&gt;&lt;/a&gt;withCredentials&lt;/h3&gt;&lt;p&gt;　　标准的CORS请求不操作Cookie，既不发送也不设置。为了使请求中包含Cookie，就需要将withCredentials设置为true。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
xhr.withCredentials = true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　　服务器在处理这一请求时，需要将Access-Control-Allow-Credentials设置为true，后面会有详细介绍。
　　&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Access-Control-Allow-Credentials: true&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　withCredentials属性使得请求包含了远程域的所有Cookie，但是值得注意的是这些Cookie仍然遵守同源策略，所以在代码中并不能通过”document.cookie”或者响应头来获得cookie信息。这些cookie仅由远程域控制。&lt;/p&gt;
&lt;h3 id=&quot;u53D1_u9001_u8BF7_u6C42&quot;&gt;&lt;a href=&quot;#u53D1_u9001_u8BF7_u6C42&quot; class=&quot;headerlink&quot; title=&quot;发送请求&quot;&gt;&lt;/a&gt;发送请求&lt;/h3&gt;&lt;p&gt;　　现在CORS Request 已经配置好，可以调用send()方法来发送请求。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;xhr.send();&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　如果请求需要包含其他内容，只需将其作为send()方法的一个参数。&lt;/p&gt;
&lt;p&gt;　　一旦服务端配置成功，那么我们只需处理后续的onload事件，就像我们平时所熟悉的XHR一样。&lt;/p&gt;
&lt;h3 id=&quot;u5B8C_u6574_u4F8B_u5B50&quot;&gt;&lt;a href=&quot;#u5B8C_u6574_u4F8B_u5B50&quot; class=&quot;headerlink&quot; title=&quot;完整例子&quot;&gt;&lt;/a&gt;完整例子&lt;/h3&gt;&lt;p&gt;　　下面是CORS request的完整代码。&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/cors/#&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;运行&lt;/a&gt;该示例并通过浏览器调试器来观察实际的网络请求。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Create the XHR object.&amp;#10;function createCORSRequest(method, url) &amp;#123;&amp;#10;  var xhr = new XMLHttpRequest();&amp;#10;  if (&amp;#34;withCredentials&amp;#34; in xhr) &amp;#123;&amp;#10;    // XHR for Chrome/Firefox/Opera/Safari.&amp;#10;    xhr.open(method, url, true);&amp;#10;  &amp;#125; else if (typeof XDomainRequest != &amp;#34;undefined&amp;#34;) &amp;#123;&amp;#10;    // XDomainRequest for IE.&amp;#10;    xhr = new XDomainRequest();&amp;#10;    xhr.open(method, url);&amp;#10;  &amp;#125; else &amp;#123;&amp;#10;    // CORS not supported.&amp;#10;    xhr = null;&amp;#10;  &amp;#125;&amp;#10;  return xhr;&amp;#10;&amp;#125;&amp;#10;&amp;#10;// Helper method to parse the title tag from the response.&amp;#10;function getTitle(text) &amp;#123;&amp;#10;  return text.match(&amp;#39;&amp;#60;title&amp;#62;(.*)?&amp;#60;/title&amp;#62;&amp;#39;)[1];&amp;#10;&amp;#125;&amp;#10;&amp;#10;// Make the actual CORS request.&amp;#10;function makeCorsRequest() &amp;#123;&amp;#10;  // All HTML5 Rocks properties support CORS.&amp;#10;  var url = &amp;#39;http://updates.html5rocks.com&amp;#39;;&amp;#10;&amp;#10;  var xhr = createCORSRequest(&amp;#39;GET&amp;#39;, url);&amp;#10;  if (!xhr) &amp;#123;&amp;#10;    alert(&amp;#39;CORS not supported&amp;#39;);&amp;#10;    return;&amp;#10;  &amp;#125;&amp;#10;&amp;#10;  // Response handlers.&amp;#10;  xhr.onload = function() &amp;#123;&amp;#10;    var text = xhr.responseText;&amp;#10;    var title = getTitle(text);&amp;#10;    alert(&amp;#39;Response from CORS request to &amp;#39; + url + &amp;#39;: &amp;#39; + title);&amp;#10;  &amp;#125;;&amp;#10;&amp;#10;  xhr.onerror = function() &amp;#123;&amp;#10;    alert(&amp;#39;Woops, there was an error making the request.&amp;#39;);&amp;#10;  &amp;#125;;&amp;#10;&amp;#10;  xhr.send();&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;u670D_u52A1_u5668_u914D_u7F6E&quot;&gt;&lt;a href=&quot;#u670D_u52A1_u5668_u914D_u7F6E&quot; class=&quot;headerlink&quot; title=&quot;服务器配置&quot;&gt;&lt;/a&gt;服务器配置&lt;/h2&gt;&lt;p&gt;　　我们需要知道到服务端到底从浏览器那里收到了怎样的内荣。为了完成CORS请求，浏览器会增加一些额外的请求头，有时还会发送额外的请求。（可以通过网络封包分析软件来查看，比如 &lt;a href=&quot;http://www.wireshark.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wireshark&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;　　因为浏览器已经负责实现了CORS最关键的部分；但是服务端的后台脚本则需要我们自己进行处理。这节介绍如何配置服务器来支持CORS。&lt;br&gt;&lt;img src=&quot;/images/20160227021223.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;CORS流程图&lt;/p&gt;
&lt;h3 id=&quot;CORS_u8BF7_u6C42_u5206_u7C7B&quot;&gt;&lt;a href=&quot;#CORS_u8BF7_u6C42_u5206_u7C7B&quot; class=&quot;headerlink&quot; title=&quot;CORS请求分类&quot;&gt;&lt;/a&gt;CORS请求分类&lt;/h3&gt;&lt;p&gt;　　Cross-orgin request 分为两类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简单请求&lt;/li&gt;
&lt;li&gt;复杂请求&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　　简单请求有下列特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 方法匹配下面任何一个（区分大小写）：&lt;ul&gt;
&lt;li&gt;HEAD&lt;/li&gt;
&lt;li&gt;GET&lt;/li&gt;
&lt;li&gt;POST&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;包含这些HTTP Header（区分大小写）：&lt;ul&gt;
&lt;li&gt;Accept&lt;/li&gt;
&lt;li&gt;Accept-Language&lt;/li&gt;
&lt;li&gt;Content-Language&lt;/li&gt;
&lt;li&gt;Last-Event-ID&lt;/li&gt;
&lt;li&gt;Content-Type，值仅能是下列之一：&lt;ul&gt;
&lt;li&gt;application/x-www-form-urlencoded&lt;/li&gt;
&lt;li&gt;multipart/form-data&lt;/li&gt;
&lt;li&gt;text/plain&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　简单请求的特征就是这样，可以由浏览器完成请求无需CORS。比如，JSON-P可以发出跨域GET请求。Or HTML could be used to do a form POST.&lt;/p&gt;
&lt;p&gt;　　任何一个不满足上述条件的请求都是复杂请求，复杂请求需要额外的预请求（preflight request），下面我们将介绍。&lt;/p&gt;
&lt;h3 id=&quot;u7B80_u5355_u8BF7_u6C42&quot;&gt;&lt;a href=&quot;#u7B80_u5355_u8BF7_u6C42&quot; class=&quot;headerlink&quot; title=&quot;简单请求&quot;&gt;&lt;/a&gt;简单请求&lt;/h3&gt;&lt;p&gt;　　我们先看一个简单请求。下面是JavaScript代码，紧随其后的是浏览器发出的请求，粗体字表示CORS请求所需的header。&lt;br&gt;JavaScript:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
var url = &#39;http://api.alice.com/cors&#39;;
var xhr = createCORSRequest(&#39;GET&#39;, url);
xhr.send();
&lt;/code&gt;&lt;/pre&gt;
HTTP请求:
&lt;pre&gt;&lt;code&gt;
GET /cors HTTP/1.1
&lt;b&gt;Origin&lt;/b&gt;: http://api.bob.com
Host: api.alice.com
Accept-Language: en-US
Connection: keep-alive
User-Agent: Mozilla/5.0...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　　CORS请求总是包含一个&lt;strong&gt;Origin&lt;/strong&gt;请求头，它由浏览器添加。该值包含协议名、地址和一个可选的端口。例如：&lt;a href=&quot;http://api.alice.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://api.alice.com&lt;/a&gt;.&lt;br&gt;　　有&lt;strong&gt;Origin&lt;/strong&gt;请求头的请求并不一定是跨域请求。不仅跨域请求需要Origin请求头，一些同域请求也可能需要有该请求头。例如，Firefox在同域请求中不添加Origin请求头，但是Chrome和Safari在POST/PUT/DELETE同域请求中包含Origin请求头。下面是个栗子。&lt;br&gt;　　HTTP请求&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
POST /cors HTTP/1.1
&lt;b&gt;Origin&lt;/b&gt; : http://api.bob.com
&lt;b&gt;Host&lt;/b&gt;: api.bob.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　　无论请求中是否有CORS所需的请求头，服务器都会响应。但是如果Origin中的域名不在服务器的允许列表中，服务器将返回错误信息。&lt;br&gt;　　下面是有效的响应，CORS所需headers用粗体表示。&lt;br&gt;　　HTTP 响应：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;b&gt;Access-Control-Allow-Origin&lt;/b&gt;: http://api.bob.com
&lt;b&gt;Access-Control-Allow-Credentials&lt;/b&gt;: true
&lt;b&gt;Access-Control-Expose-Headers&lt;/b&gt;: FooBar
Content-Type: text/html; charset=utf-8

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　　在响应中，和CORS相关项目都是以”Access-Control-“为前缀，具体含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Access-Control-Allow-Origin (必含)-不可省略，否则CORS请求失败。该项表示服务器响应指定的域的CORS请求。值为 “*”时响应任何域的CORS请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Access-Control-Allow-Credentials（可选）该项表示请求中是否包含Cookie信息，默认情况，请求中不包含Cookie信息。只有一个可选值true（必须小写）。如果不包含Cookie信息，请略去该项而不是设置其值为false。这一项与XmlHttpRequest2对象当中的withCredentials属性应保持一致，即withCredentials为true时该项也为true；withCredentials为false时，省略该项不写。反之则导致请求失败。除非你确实需要CORS请求中包含Cookie信息，否则不要设置该项。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Access-Control-Expose-Headers（可选）- XMLHttpRequest2 对象的getResponseHeader()方法返回相应头的信息。在CORS请求中，该方法只能获得一些简单信息。能获得的信息如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cache-Control&lt;/li&gt;
&lt;li&gt;Content-Language&lt;/li&gt;
&lt;li&gt;Content-Type&lt;/li&gt;
&lt;li&gt;Expires&lt;/li&gt;
&lt;li&gt;Last-Modified&lt;/li&gt;
&lt;li&gt;Pragma&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　如果你希望客户端能获得到其他header信息，你必须设置Access-Control-Expose-Headers。其值为其他相应头名字，多个值之间用逗号隔开。&lt;/p&gt;
&lt;h3 id=&quot;u590D_u6742_u8BF7_u6C42&quot;&gt;&lt;a href=&quot;#u590D_u6742_u8BF7_u6C42&quot; class=&quot;headerlink&quot; title=&quot;复杂请求&quot;&gt;&lt;/a&gt;复杂请求&lt;/h3&gt;&lt;p&gt;　　到目前我们只介绍了简单请求，但是如果我们想做更多的操作怎么办？比如你需要发送PUT、DELTET等HTTP动作，或者发送Content-Type:application/json的内容。这时就需要我所说的复杂请求了。&lt;br&gt;　　复杂请求表面上看起来和简单请求使用上差不多，但实际上浏览器发送了不止一个请求。其中最先发送的是一种“预请求”，此时作为服务端，也需要返回“预回应”作为响应。预请求实际上是对服务端的一种权限请求，只有当预请求成功返回，实际请求才开始执行。&lt;/p&gt;
&lt;p&gt;JavaScript：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
var url = &#39;http://api.alice.com/cors&#39;;
var xhr = createCORSRequest(&#39;PUT&#39;, url);
xhr.setRequestHeader(
    &#39;X-Custom-Header&#39;, &#39;value&#39;);
xhr.send();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;预请求：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
OPTIONS /cors HTTP/1.1
&lt;b&gt;Origin&lt;/b&gt;: http://api.bob.com
&lt;b&gt;Access-Control-Request-Method&lt;/b&gt;: PUT
&lt;b&gt;Access-Control-Request-Headers&lt;/b&gt;: X-Custom-Header
Host: api.alice.com
Accept-Language: en-US
Connection: keep-alive
User-Agent: Mozilla/5.0...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　　类似简单请求，预请求也包含CORS需要的请求头。预请求用HTTP OPTIONS方法发送请求（确保你的服务器响应该方法的请求）。它也包含一些额外的请求头：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Access-Control-Request-Method - 实际的HTTP请求方法，即使简单请求也会有该请求头。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Access-Control-Request-Headers - 以逗号分隔的列表，请求所使用的header。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　预请求用来验证服务器是否允许执行实际的请求。服务器校验上面两个请求头，验证请求方法和请求头是有效和可处理的。如果允许则服务器应返回如下响应：&lt;/p&gt;
&lt;p&gt;预请求：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
OPTIONS /cors HTTP/1.1
&lt;b&gt;Origin&lt;/b&gt;: http://api.bob.com
&lt;b&gt;Access-Control-Request-Method&lt;/b&gt;: PUT
&lt;b&gt;Access-Control-Request-Headers&lt;/b&gt;: X-Custom-Header
Host: api.alice.com
Accept-Language: en-US
Connection: keep-alive
User-Agent: Mozilla/5.0...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;预响应&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;b&gt;Access-Control-Allow-Origin&lt;/b&gt;: http://api.bob.com
&lt;b&gt;Access-Control-Allow-Methods&lt;/b&gt;: GET, POST, PUT
&lt;b&gt;Access-Control-Allow-Headers&lt;/b&gt;: X-Custom-Header
Content-Type: text/html; charset=utf-8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Access-Control-Allow-Origin（必含） - 类似简单请求的响应，预响应也应该包含该响应头。&lt;/p&gt;
&lt;p&gt;Access-Control-Allow-Methods（必含) - 以逗号分隔的列表，服务器支持的请求方法。&lt;/p&gt;
&lt;p&gt;Access-Control-Allow-Headers（如果请求有Access-Control-Request-Headers请求头，该项为必含）- 以逗号分隔的列表，服务器支持的请求头。类似 上面的 Access-Control-Allow-Methods ，列出了服务器支持的所有的header，而不仅仅是预请求中的 Access-Control-Request-Headers。&lt;/p&gt;
&lt;p&gt;Access-Control-Allow-Credentials（可选） - 和简单请求定义一样。&lt;/p&gt;
&lt;p&gt;Access-Control-Max-Age (可选) - 预检对服务器带来很大压力，因为客户端每次操作都执行两次请求。preflight response 可以缓存起来，来减轻服务器压力，该项设置了缓存失效时间。&lt;/p&gt;
&lt;p&gt;一旦预检成功，浏览器将发起实际请求，看起来和简单请求一样。响应也类似：&lt;/p&gt;
&lt;p&gt;实际请求:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
PUT /cors HTTP/1.1
&lt;b&gt;Origin&lt;/b&gt;: http://api.bob.com
Host: api.alice.com
&lt;b&gt;X-Custom-Header&lt;/b&gt;: value
Accept-Language: en-US
Connection: keep-alive
User-Agent: Mozilla/5.0...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实际响应:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;b&gt;Access-Control-Allow-Origin&lt;/b&gt;: http://api.bob.com
Content-Type: text/html; charset=utf-8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使服务器拒绝CORS请求，可以仅仅返回一个不包含任何CORS header的响应。预检失败服务器也应拒绝该次请求。由于响应里没有CORS特定的header，浏览器认为请求失败，不会发起实际请求:&lt;/p&gt;
&lt;p&gt;预检请求：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
OPTIONS&lt; /cors HTTP/1.1
&lt;b&gt;Origin&lt;/b&gt;: http://api.bob.com
&lt;b&gt;Access-Control-Request-Method&lt;/b&gt;: PUT
&lt;b&gt;Access-Control-Request-Headers&lt;/b&gt;: X-Custom-Header
Host: api.alice.com
Accept-Language: en-US
Connection: keep-alive
User-Agent: Mozilla/5.0...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;预检请求响应&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// ERROR - &amp;#27809;&amp;#26377; CORS header, &amp;#36825;&amp;#26159;&amp;#19968;&amp;#20010;&amp;#26080;&amp;#25928;&amp;#35831;&amp;#27714;!&amp;#10;Content-Type: text/html; charset=utf-8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果CORS请求发生错误，浏览器将触发onerror事件，并且会把错误信息输出到控制台：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;XMLHttpRequest cannot load &lt;a href=&quot;http://api.alice.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://api.alice.com&lt;/a&gt;. Origin &lt;a href=&quot;http://api.bob.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://api.bob.com&lt;/a&gt; is not allowed by Access-Control-Allow-Origin.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;浏览器不会给出详细的错误情况，仅仅告知我们请求出错了。&lt;/p&gt;
&lt;h3 id=&quot;u5B89_u5168_u95EE_u9898&quot;&gt;&lt;a href=&quot;#u5B89_u5168_u95EE_u9898&quot; class=&quot;headerlink&quot; title=&quot;安全问题&quot;&gt;&lt;/a&gt;安全问题&lt;/h3&gt;&lt;p&gt;跨域请求始终是网页安全中一个比较头疼的问题，CORS提供了一种跨域请求方案，但没有为安全访问提供足够的保障机制，如果你需要信息的绝对安全，不要依赖CORS当中的权限制度，应当使用更多其它的措施来保障，比如OAuth2。&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;编译自&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/cors/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.html5rocks.com/en/tutorials/cors/&lt;/a&gt;    &lt;br&gt;作者：Monsur Hossain&lt;br&gt;本文中的所有译文仅用于学习和交流目的，转载请务必注明文章译者、出处、和本文链接，本文翻译工作遵照 &lt;a href=&quot;http://zh.wikipedia.org/wiki/Wikipedia:CC&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CC协议&lt;/a&gt;，如果有侵犯到您的权益，请及时联系我。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u5F15_u8A00&quot;&gt;&lt;a href=&quot;#u5F15_u8A00&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;　　API的出现增强了富web应用开发的体验。曾经想通过跨域请求api非常困难可以使用json-p这样的
    
    </summary>
    
      <category term="翻译" scheme="http://emou.me/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="CORS" scheme="http://emou.me/tags/CORS/"/>
    
      <category term="HTTP" scheme="http://emou.me/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>beginning</title>
    <link href="http://emou.me/2016/02/03/beginning/"/>
    <id>http://emou.me/2016/02/03/beginning/</id>
    <published>2016-02-03T13:11:00.000Z</published>
    <updated>2016-02-27T02:16:31.252Z</updated>
    
    <content type="html">&lt;h4 id=&quot;The_beginning_is_the_most_important_part_of_the_work-__u2013_Plato&quot;&gt;&lt;a href=&quot;#The_beginning_is_the_most_important_part_of_the_work-__u2013_Plato&quot; class=&quot;headerlink&quot; title=&quot;The beginning is the most important part of the work. – Plato&quot;&gt;&lt;/a&gt;The beginning is the most important part of the work. – Plato&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/05085938_15936.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;The_beginning_is_the_most_important_part_of_the_work-__u2013_Plato&quot;&gt;&lt;a href=&quot;#The_beginning_is_the_most_important_part_of_the_work-_
    
    </summary>
    
      <category term="随笔" scheme="http://emou.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://emou.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
